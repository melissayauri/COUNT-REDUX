{"version":3,"sources":["logo.svg","components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","increment","props","dispatch","type","decrement","refresh","id","className","this","count","onClick","React","Component","connect","state","initialState","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,+LCIrCC,G,iNAGJC,UAAY,WAIV,EAAKC,MAAMC,SAAS,CAACC,KAAK,e,EAG5BC,UAAY,WACV,EAAKH,MAAMC,SAAS,CAACC,KAAK,e,EAK5BE,QAAU,WACR,EAAKJ,MAAMC,SAAS,CAACC,KAAK,a,wEAO1B,OACI,yBAAKG,GAAG,eACR,yBAAKA,GAAG,oBAAoBC,UAAU,aACpC,uBAAGD,GAAG,WAAWE,KAAKP,MAAMQ,QAE9B,yBAAKH,GAAG,oBAAoBC,UAAU,aACpC,4BAAQD,GAAG,mBAAmBC,UAAU,SAASG,QAASF,KAAKR,WAAW,uBAAGO,UAAU,eAAvF,KACA,4BAAQD,GAAG,mBAAmBC,UAAU,SAASG,QAASF,KAAKJ,WAAW,uBAAGG,UAAU,gBAAvF,KACA,4BAAQD,GAAG,eAAeC,UAAU,SAAUG,QAASF,KAAKH,SAAS,uBAAGE,UAAU,kBAAlF,W,GAhCYI,IAAMC,YA8CbC,kBALf,SAAyBC,GACvB,MAAM,CACJL,MAAOK,EAAML,QAGFI,CAAyBd,GC5ClCgB,EAAa,CACjBN,MAAM,GAwBR,IAAMO,EAAQC,YArBd,WAA8C,IAA7BH,EAA4B,uDAArBC,EAItB,QAJ2C,wCAI7BZ,MACZ,IAAK,YACH,MAAM,CACJM,MAAOK,EAAML,MAAO,GAEtB,IAAK,YACD,MAAM,CACJA,MAAOK,EAAML,MAAO,GAEtB,IAAK,UACD,MAAM,CACJA,MAAO,GAEjB,QACE,OAAOK,KAcAI,MAVf,WACE,OACE,kBAAC,IAAD,CAAUF,MAAOA,GACd,kBAAC,EAAD,QCvBaG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b1135e61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport  './counter.css';\r\n\r\nclass Counter extends React.Component {\r\n  //state = { count: 0 }\r\n\r\n  increment = () => {\r\n    /*this.setState({\r\n      count: this.state.count + 1\r\n    });*/\r\n    this.props.dispatch({type:'INCREMENT'})\r\n  }\r\n\r\n  decrement = () => {\r\n    this.props.dispatch({type:'DECREMENT'})\r\n   /* this.setState({\r\n      count: this.state.count - 1\r\n    });*/\r\n  }\r\n  refresh = () => {\r\n    this.props.dispatch({type:'REFRESH'})\r\n   /* this.setState({\r\n      count: this.state.count - 1\r\n    });*/\r\n  }\r\n  /*<p id=\"display\">{this.state.count}</p>*/\r\n  render() {\r\n    return (\r\n        <div id=\"counter-app\">\r\n        <div id=\"display-container\" className=\"container\">\r\n          <p id=\"display\">{this.props.count}</p>\r\n        </div>\r\n        <div id=\"buttons-container\" className=\"container\">\r\n          <button id=\"increment-button\" className=\"button\" onClick={this.increment}><i className=\"fa fa-plus\"></i>+</button>\r\n          <button id=\"decrement-button\" className=\"button\" onClick={this.decrement}><i className=\"fa fa-minus\"></i>-</button>\r\n          <button id=\"reset-button\" className=\"button\"  onClick={this.refresh}><i className=\"fa fa-refresh\"></i>X</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n//export default Counter;\r\n\r\nfunction mapStateToProps(state){\r\n  return{\r\n    count: state.count\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Counter)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport Counter from '../src/components/Counter'\nconst initialState={\n  count:0\n}\n// toma el estado actual con un acci√≥n\nfunction reducer(state= initialState, action){\n  /*return{\n  count:32\n  }*/\n  switch(action.type){\n    case 'INCREMENT':\n      return{\n        count: state.count +1\n      }\n      case 'DECREMENT':\n          return{\n            count: state.count -1\n          }\n          case 'REFRESH':\n              return{\n                count: 0\n              }\n      default:\n        return state;\n  }\n}\nconst store = createStore(reducer)\nfunction App() {\n  return (\n    <Provider store={store}>\n       <Counter/>\n    </Provider>\n   \n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}